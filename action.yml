name: 'Pull Request Commenter'
description: 'Create or update a comment on a pull request'
inputs:
  comment-body:
    description: 'Content for comment body'
    required: true
  comment-search-includes:
    description: 'The text to search for in existing comments'
    required: true
  comment-title:
    description: 'Title for the comment'
    required: true
  comment-edit-mode:
    description: 'Edit mode for the comment (append or replace)'
    default: 'replace'
  comment-reactions:
    description: 'Reactions to add to the comment'
    required: false
  remove-comment-if-no-output:
    description: 'Whether to remove the comment if there is no body'
    default: 'true'
  fail-on-output:
    description: 'Whether to fail the workflow if there is no body'
    default: 'false'
  gif_search_term:
    description: 'Search term for Giphy API'
    required: false
  giphy_api_key:
    description: 'Giphy API key'
    required: false

runs:
  using: composite
  steps:
    - name: Fetch random missing gif from Giphy
      if: inputs.comment-body && inputs.gif_search_term && inputs.giphy_api_key
      id: missing_gif
      env:
        SEARCH_TERM: ${{ inputs.gif_search_term }}
        GIPHY_API_KEY: ${{ inputs.giphy_api_key }}
      shell: bash
      run: |
        gif_url=$(bash script/get_gif_url.sh "$SEARCH_TERM" "$GIPHY_API_KEY")
        echo "GIF_URL=$gif_url" >> $GITHUB_ENV

    - name: Find Comment with specified message
      uses: peter-evans/find-comment@v2
      id: find_comment
      with:
        issue-number: ${{ github.event.pull_request.number }}
        comment-author: 'github-actions[bot]'
        body-includes: ${{ inputs.comment-search-includes }}

    - name: Create or update comment with the output
      if: inputs.comment-body
      uses: peter-evans/create-or-update-comment@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        issue-number: ${{ github.event.number }}
        comment-id: ${{ steps.find_comment.outputs.comment-id }}
        body: |
          ${{ inputs.comment-title }}<br />
          <pre>${{ inputs.comment-body }}</pre> <br />
          ${{ env.GIF_URL && '![GIF](' + env.GIF_URL + ')' }}
        edit-mode: ${{ inputs.comment-edit-mode }}
        reactions: ${{ inputs.comment-reactions }}

    - name: Remove comment if body is empty
      if: inputs.comment-body == '' && inputs.remove-comment-if-no-output == 'true'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      shell: bash
      run: |
        comment_id=${{ steps.find_comment.outputs.comment-id }}
        if [ -n "$comment_id" ]; then
          gh api --silent -X DELETE "repos/${{ github.repository }}/issues/comments/$comment_id"
        fi

    - name: Fail workflow if output is found and fail-on-output is true
      if: inputs.comment-body != '' && inputs.fail-on-output == 'true'
      shell: bash
      run: |
        echo "::error::Errors found in the output"
        exit 1

